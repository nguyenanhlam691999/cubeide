
HOMEWORK_PWM_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d0  080005d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080005d0  080005d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d0  080005d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080005d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080005e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080005e4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001709  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000602  00000000  00000000  0002173e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00021d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00021f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002182  00000000  00000000  000220b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001c2b  00000000  00000000  0002423a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ec58  00000000  00000000  00025e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a4abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f0  00000000  00000000  000a4b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080005b0 	.word	0x080005b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080005b0 	.word	0x080005b0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <Custom_SysTick_Init>:
#include<stdint.h>
#include"my_define.h"

RCC_t *MY_RCC = 0x40021000;
GPIO_t *MY_GPIO_B = 0x40010c00;
void Custom_SysTick_Init() {
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
	uint32_t *SYST_CSR = (uint32_t*) (0xE000E010);
 8000166:	4b09      	ldr	r3, [pc, #36]	; (800018c <Custom_SysTick_Init+0x2c>)
 8000168:	607b      	str	r3, [r7, #4]
	uint32_t *SYST_RVR = (uint32_t*) (0xE000E014);
 800016a:	4b09      	ldr	r3, [pc, #36]	; (8000190 <Custom_SysTick_Init+0x30>)
 800016c:	603b      	str	r3, [r7, #0]
	*SYST_CSR = (*SYST_CSR & ~(uint32_t) 0x0007) | 7;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	f043 0207 	orr.w	r2, r3, #7
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	601a      	str	r2, [r3, #0]
	*SYST_RVR = 8000;
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000180:	601a      	str	r2, [r3, #0]
}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	e000e010 	.word	0xe000e010
 8000190:	e000e014 	.word	0xe000e014

08000194 <Custom_Delay>:
void Custom_Delay(uint32_t milisec) {
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	uint32_t *SYST_CSR = (uint32_t*) (0xE000E010);
 800019c:	4b11      	ldr	r3, [pc, #68]	; (80001e4 <Custom_Delay+0x50>)
 800019e:	60bb      	str	r3, [r7, #8]
	*SYST_CSR = (*SYST_CSR & ~(uint32_t) 0x0001) | 1;
 80001a0:	68bb      	ldr	r3, [r7, #8]
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f043 0201 	orr.w	r2, r3, #1
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	601a      	str	r2, [r3, #0]
	uint32_t cnt = 0;
 80001ac:	2300      	movs	r3, #0
 80001ae:	60fb      	str	r3, [r7, #12]
	while (cnt < milisec) {
 80001b0:	e008      	b.n	80001c4 <Custom_Delay+0x30>
		if (((*SYST_CSR & (uint32_t) 0x10000) >> 16) == 1)
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d002      	beq.n	80001c4 <Custom_Delay+0x30>
			cnt++;
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	3301      	adds	r3, #1
 80001c2:	60fb      	str	r3, [r7, #12]
	while (cnt < milisec) {
 80001c4:	68fa      	ldr	r2, [r7, #12]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d3f2      	bcc.n	80001b2 <Custom_Delay+0x1e>
	}
	*SYST_CSR = (*SYST_CSR & ~(uint32_t) 0x0001);
 80001cc:	68bb      	ldr	r3, [r7, #8]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f023 0201 	bic.w	r2, r3, #1
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	601a      	str	r2, [r3, #0]
}
 80001d8:	bf00      	nop
 80001da:	3714      	adds	r7, #20
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	e000e010 	.word	0xe000e010

080001e8 <MY_RCC_INIT>:
void MY_RCC_INIT(char *mode) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	if (strcmp(mode, "PLL") == 0) {
 80001f0:	4923      	ldr	r1, [pc, #140]	; (8000280 <MY_RCC_INIT+0x98>)
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f7ff ffaa 	bl	800014c <strcmp>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d127      	bne.n	800024e <MY_RCC_INIT+0x66>
		MY_RCC->CFGR &= ~(0xf << 18);
 80001fe:	4b21      	ldr	r3, [pc, #132]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 800020c:	605a      	str	r2, [r3, #4]
		MY_RCC->CFGR |= (0b0110 << 18);
 800020e:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
 800021c:	605a      	str	r2, [r3, #4]
		MY_RCC->CFGR |= 0b10;
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	685a      	ldr	r2, [r3, #4]
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f042 0202 	orr.w	r2, r2, #2
 800022c:	605a      	str	r2, [r3, #4]
		MY_RCC->CFGR |= (0b0100 << 24);
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	685a      	ldr	r2, [r3, #4]
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800023c:	605a      	str	r2, [r3, #4]
		MY_RCC->CR |= (1 << 24);
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800024c:	601a      	str	r2, [r3, #0]
	}
	if (strcmp(mode, "HSI") == 0) {
 800024e:	490e      	ldr	r1, [pc, #56]	; (8000288 <MY_RCC_INIT+0xa0>)
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f7ff ff7b 	bl	800014c <strcmp>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d10d      	bne.n	8000278 <MY_RCC_INIT+0x90>
		MY_RCC->CFGR |= (0b00);
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MY_RCC_INIT+0x9c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	605a      	str	r2, [r3, #4]
		MY_RCC->CR |= (1 << 0);
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MY_RCC_INIT+0x9c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MY_RCC_INIT+0x9c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f042 0201 	orr.w	r2, r2, #1
 8000276:	601a      	str	r2, [r3, #0]
	}
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	080005c8 	.word	0x080005c8
 8000284:	20000000 	.word	0x20000000
 8000288:	080005cc 	.word	0x080005cc

0800028c <MY_TIMER1_INIT>:

void MY_TIMER1_INIT() {
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
	// 1000 times in 1 millis
	// TIMER1 : 40012C00
	// SET PRE-SCALER PSC 0x28
	uint32_t *TIMER1_PSC = (uint32_t*) 0x40012C28;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <MY_TIMER1_INIT+0x34>)
 8000294:	607b      	str	r3, [r7, #4]
	*TIMER1_PSC = 7;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2207      	movs	r2, #7
 800029a:	601a      	str	r2, [r3, #0]
	// SET AUTO-RELOAD ARR 0x2C
	uint32_t *TIMER_ARR = (uint32_t*) 0x40012C2C;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MY_TIMER1_INIT+0x38>)
 800029e:	603b      	str	r3, [r7, #0]
	*TIMER_ARR &= ~(0xffff);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	0c1b      	lsrs	r3, r3, #16
 80002a6:	041b      	lsls	r3, r3, #16
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	6013      	str	r3, [r2, #0]
	*TIMER_ARR = 1000;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b2:	601a      	str	r2, [r3, #0]

}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40012c28 	.word	0x40012c28
 80002c4:	40012c2c 	.word	0x40012c2c

080002c8 <MY_DELAY>:

void MY_DELAY(uint32_t millis) {
 80002c8:	b480      	push	{r7}
 80002ca:	b087      	sub	sp, #28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	int counter = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
	// counter value
	uint32_t *TIMER1_CNT = (uint32_t*) 0x40012C24;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <MY_DELAY+0x68>)
 80002d6:	613b      	str	r3, [r7, #16]
	// ENABLE TIMER1 BY SET CEN ON CR1
	uint32_t *TIMER1_CR1 = (uint32_t*) 0x40012C00;
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <MY_DELAY+0x6c>)
 80002da:	60fb      	str	r3, [r7, #12]
	*TIMER1_CR1 |= 0b1;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f043 0201 	orr.w	r2, r3, #1
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]
	// RESERT SR
	uint32_t *TIMER1_SR = (uint32_t*) 0x40012C10;
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <MY_DELAY+0x70>)
 80002ea:	60bb      	str	r3, [r7, #8]
	*TIMER1_SR &= ~(0xfff);
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80002f4:	f023 030f 	bic.w	r3, r3, #15
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	6013      	str	r3, [r2, #0]
	// WAIT UIF IS SET
	while ((*TIMER1_SR & 1) != 1)
 80002fc:	bf00      	nop
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <MY_DELAY+0x36>
		;

	while (counter < millis) {
 800030a:	e007      	b.n	800031c <MY_DELAY+0x54>

		if (*TIMER1_CNT == 1000) {
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000314:	d102      	bne.n	800031c <MY_DELAY+0x54>
			counter++;
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	3301      	adds	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
	while (counter < millis) {
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	d8f3      	bhi.n	800030c <MY_DELAY+0x44>
		}
	}

}
 8000324:	bf00      	nop
 8000326:	371c      	adds	r7, #28
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40012c24 	.word	0x40012c24
 8000334:	40012c00 	.word	0x40012c00
 8000338:	40012c10 	.word	0x40012c10

0800033c <LED_BLINK>:


void LED_BLINK() {
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
// SET GPIO OUTPUT
MY_GPIO_B->CRL &= ~(0xf);
 8000342:	4b45      	ldr	r3, [pc, #276]	; (8000458 <LED_BLINK+0x11c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	4b43      	ldr	r3, [pc, #268]	; (8000458 <LED_BLINK+0x11c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f022 020f 	bic.w	r2, r2, #15
 8000350:	601a      	str	r2, [r3, #0]
MY_GPIO_B->CRL |= (0b001100110011);
 8000352:	4b41      	ldr	r3, [pc, #260]	; (8000458 <LED_BLINK+0x11c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a3f      	ldr	r2, [pc, #252]	; (8000458 <LED_BLINK+0x11c>)
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	f443 734c 	orr.w	r3, r3, #816	; 0x330
 8000360:	f043 0303 	orr.w	r3, r3, #3
 8000364:	6013      	str	r3, [r2, #0]
Custom_Delay(500);
 8000366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800036a:	f7ff ff13 	bl	8000194 <Custom_Delay>
MY_GPIO_B->ODR |= 0xffff;
 800036e:	4b3a      	ldr	r3, [pc, #232]	; (8000458 <LED_BLINK+0x11c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a38      	ldr	r2, [pc, #224]	; (8000458 <LED_BLINK+0x11c>)
 8000376:	6812      	ldr	r2, [r2, #0]
 8000378:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800037c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000380:	60d3      	str	r3, [r2, #12]
Custom_Delay(500);
 8000382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000386:	f7ff ff05 	bl	8000194 <Custom_Delay>
char chieu = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	73fb      	strb	r3, [r7, #15]
for (int var = 0; (var < 3) && (chieu == 0); ++var) {
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	e028      	b.n	80003e6 <LED_BLINK+0xaa>
	MY_GPIO_B->ODR &= ~(1 << var);
 8000394:	4b30      	ldr	r3, [pc, #192]	; (8000458 <LED_BLINK+0x11c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	68da      	ldr	r2, [r3, #12]
 800039a:	2101      	movs	r1, #1
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43db      	mvns	r3, r3
 80003a4:	4619      	mov	r1, r3
 80003a6:	4b2c      	ldr	r3, [pc, #176]	; (8000458 <LED_BLINK+0x11c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	400a      	ands	r2, r1
 80003ac:	60da      	str	r2, [r3, #12]
	Custom_Delay(500);
 80003ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b2:	f7ff feef 	bl	8000194 <Custom_Delay>
	//SET LED OFF
	MY_GPIO_B->ODR |= (1 << var);
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <LED_BLINK+0x11c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	68da      	ldr	r2, [r3, #12]
 80003bc:	2101      	movs	r1, #1
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	fa01 f303 	lsl.w	r3, r1, r3
 80003c4:	4619      	mov	r1, r3
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <LED_BLINK+0x11c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	60da      	str	r2, [r3, #12]
	MY_DELAY(500);
 80003ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d2:	f7ff ff79 	bl	80002c8 <MY_DELAY>
	if (var == 2) {
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d101      	bne.n	80003e0 <LED_BLINK+0xa4>
		chieu = 1;
 80003dc:	2301      	movs	r3, #1
 80003de:	73fb      	strb	r3, [r7, #15]
for (int var = 0; (var < 3) && (chieu == 0); ++var) {
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	3301      	adds	r3, #1
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	dc02      	bgt.n	80003f2 <LED_BLINK+0xb6>
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0d0      	beq.n	8000394 <LED_BLINK+0x58>
	}
}
for (int varr = 2; (chieu == 1); --varr) {
 80003f2:	2302      	movs	r3, #2
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	e028      	b.n	800044a <LED_BLINK+0x10e>
	MY_GPIO_B->ODR &= ~(1 << varr);
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <LED_BLINK+0x11c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	68da      	ldr	r2, [r3, #12]
 80003fe:	2101      	movs	r1, #1
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43db      	mvns	r3, r3
 8000408:	4619      	mov	r1, r3
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <LED_BLINK+0x11c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	400a      	ands	r2, r1
 8000410:	60da      	str	r2, [r3, #12]
	MY_DELAY(500);
 8000412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000416:	f7ff ff57 	bl	80002c8 <MY_DELAY>
	//SET LED OFF
	MY_GPIO_B->ODR |= (1 << varr);
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <LED_BLINK+0x11c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	68da      	ldr	r2, [r3, #12]
 8000420:	2101      	movs	r1, #1
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	4619      	mov	r1, r3
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <LED_BLINK+0x11c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	60da      	str	r2, [r3, #12]
	MY_DELAY(500);
 8000432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000436:	f7ff ff47 	bl	80002c8 <MY_DELAY>
	if (varr == 0) {
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d101      	bne.n	8000444 <LED_BLINK+0x108>
		chieu = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
for (int varr = 2; (chieu == 1); --varr) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d0d3      	beq.n	80003f8 <LED_BLINK+0xbc>
	}

}

}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000004 	.word	0x20000004

0800045c <main>:
int main() {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
Custom_SysTick_Init();
 8000460:	f7ff fe7e 	bl	8000160 <Custom_SysTick_Init>
MY_RCC_INIT("HSI");
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <main+0x38>)
 8000466:	f7ff febf 	bl	80001e8 <MY_RCC_INIT>
// ENABLE CLOCK TIMER1
MY_RCC->APB2ENR |= (0b1 << 11);
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <main+0x3c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	699a      	ldr	r2, [r3, #24]
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <main+0x3c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000478:	619a      	str	r2, [r3, #24]
MY_RCC->APB2ENR |= (1 << 3);
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <main+0x3c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <main+0x3c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f042 0208 	orr.w	r2, r2, #8
 8000488:	619a      	str	r2, [r3, #24]
MY_TIMER1_INIT();
 800048a:	f7ff feff 	bl	800028c <MY_TIMER1_INIT>
while (1) {
	LED_BLINK();
 800048e:	f7ff ff55 	bl	800033c <LED_BLINK>
 8000492:	e7fc      	b.n	800048e <main+0x32>
 8000494:	080005cc 	.word	0x080005cc
 8000498:	20000000 	.word	0x20000000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f82f 	bl	8000544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
	...

080004f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004fa:	e003      	b.n	8000504 <LoopCopyDataInit>

080004fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000500:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000502:	3104      	adds	r1, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000508:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800050a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800050c:	d3f6      	bcc.n	80004fc <CopyDataInit>
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000510:	e002      	b.n	8000518 <LoopFillZerobss>

08000512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000514:	f842 3b04 	str.w	r3, [r2], #4

08000518 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800051c:	d3f9      	bcc.n	8000512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800051e:	f7ff ffe4 	bl	80004ea <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000522:	f000 f821 	bl	8000568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff ff99 	bl	800045c <main>
  bx lr
 800052a:	4770      	bx	lr
  ldr r3, =_sidata
 800052c:	080005d8 	.word	0x080005d8
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000534:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000538:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800053c:	2000002c 	.word	0x2000002c

08000540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_2_IRQHandler>
	...

08000544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_IncTick+0x1c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_IncTick+0x20>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x20>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	20000008 	.word	0x20000008
 8000564:	20000028 	.word	0x20000028

08000568 <__libc_init_array>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	2500      	movs	r5, #0
 800056c:	4e0c      	ldr	r6, [pc, #48]	; (80005a0 <__libc_init_array+0x38>)
 800056e:	4c0d      	ldr	r4, [pc, #52]	; (80005a4 <__libc_init_array+0x3c>)
 8000570:	1ba4      	subs	r4, r4, r6
 8000572:	10a4      	asrs	r4, r4, #2
 8000574:	42a5      	cmp	r5, r4
 8000576:	d109      	bne.n	800058c <__libc_init_array+0x24>
 8000578:	f000 f81a 	bl	80005b0 <_init>
 800057c:	2500      	movs	r5, #0
 800057e:	4e0a      	ldr	r6, [pc, #40]	; (80005a8 <__libc_init_array+0x40>)
 8000580:	4c0a      	ldr	r4, [pc, #40]	; (80005ac <__libc_init_array+0x44>)
 8000582:	1ba4      	subs	r4, r4, r6
 8000584:	10a4      	asrs	r4, r4, #2
 8000586:	42a5      	cmp	r5, r4
 8000588:	d105      	bne.n	8000596 <__libc_init_array+0x2e>
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000590:	4798      	blx	r3
 8000592:	3501      	adds	r5, #1
 8000594:	e7ee      	b.n	8000574 <__libc_init_array+0xc>
 8000596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800059a:	4798      	blx	r3
 800059c:	3501      	adds	r5, #1
 800059e:	e7f2      	b.n	8000586 <__libc_init_array+0x1e>
 80005a0:	080005d0 	.word	0x080005d0
 80005a4:	080005d0 	.word	0x080005d0
 80005a8:	080005d0 	.word	0x080005d0
 80005ac:	080005d4 	.word	0x080005d4

080005b0 <_init>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr

080005bc <_fini>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr
