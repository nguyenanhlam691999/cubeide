
homework_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000060c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000718  08000718  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000718  08000718  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000718  08000718  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000718  08000718  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000718  08000718  00010718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800071c  0800071c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000014  08000734  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000734  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020f2  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009f6  00000000  00000000  0002212f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000310  00000000  00000000  00022b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a8  00000000  00000000  00022e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000154d1  00000000  00000000  000230e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002bf5  00000000  00000000  000385b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b016  00000000  00000000  0003b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b61bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a68  00000000  00000000  000b6238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000700 	.word	0x08000700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000700 	.word	0x08000700

0800014c <MY_TIMER1_INIT>:
		MY_RCC->CFGR |= (0b00);
		MY_RCC->CR |= (1 << 0);
	}
}

void MY_TIMER1_INIT() {
 800014c:	b480      	push	{r7}
 800014e:	b08b      	sub	sp, #44	; 0x2c
 8000150:	af00      	add	r7, sp, #0
	// 1000 times in 1 millis
	// TIMER1 : 40012C00
	uint32_t *TIMER1_PSC = (uint32_t*) 0x40012C28;
 8000152:	4b31      	ldr	r3, [pc, #196]	; (8000218 <MY_TIMER1_INIT+0xcc>)
 8000154:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *TIMER1_SR = (uint32_t*) 0x40012C10;
 8000156:	4b31      	ldr	r3, [pc, #196]	; (800021c <MY_TIMER1_INIT+0xd0>)
 8000158:	623b      	str	r3, [r7, #32]
	uint32_t *TIMER_ARR = (uint32_t*) 0x40012C2C;
 800015a:	4b31      	ldr	r3, [pc, #196]	; (8000220 <MY_TIMER1_INIT+0xd4>)
 800015c:	61fb      	str	r3, [r7, #28]
	uint32_t *TIMER1_EGR = 0x40012c14;
 800015e:	4b31      	ldr	r3, [pc, #196]	; (8000224 <MY_TIMER1_INIT+0xd8>)
 8000160:	61bb      	str	r3, [r7, #24]
	uint32_t *TIMER1_DIER = 0x40012c0c;
 8000162:	4b31      	ldr	r3, [pc, #196]	; (8000228 <MY_TIMER1_INIT+0xdc>)
 8000164:	617b      	str	r3, [r7, #20]
	uint32_t *TIMER1_CCMR1 = 0x40012c18;
 8000166:	4b31      	ldr	r3, [pc, #196]	; (800022c <MY_TIMER1_INIT+0xe0>)
 8000168:	613b      	str	r3, [r7, #16]
	uint32_t *TIMER1_CCER = 0x40012c20;
 800016a:	4b31      	ldr	r3, [pc, #196]	; (8000230 <MY_TIMER1_INIT+0xe4>)
 800016c:	60fb      	str	r3, [r7, #12]
	uint32_t *TIMER1_BDTR = 0x40012c44;
 800016e:	4b31      	ldr	r3, [pc, #196]	; (8000234 <MY_TIMER1_INIT+0xe8>)
 8000170:	60bb      	str	r3, [r7, #8]
	uint32_t *TIMER1_CR1 = 0x40012c00;
 8000172:	4b31      	ldr	r3, [pc, #196]	; (8000238 <MY_TIMER1_INIT+0xec>)
 8000174:	607b      	str	r3, [r7, #4]
	// SET PRE-SCALER PSC 0x28
	*TIMER1_PSC = 0;
 8000176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
	// SET AUTO-RELOAD ARR 0x2C
	*TIMER_ARR &= ~(0xffff);
 800017c:	69fb      	ldr	r3, [r7, #28]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	0c1b      	lsrs	r3, r3, #16
 8000182:	041b      	lsls	r3, r3, #16
 8000184:	69fa      	ldr	r2, [r7, #28]
 8000186:	6013      	str	r3, [r2, #0]
	*TIMER_ARR |= 0xffff;
 8000188:	69fb      	ldr	r3, [r7, #28]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8000190:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000194:	69fa      	ldr	r2, [r7, #28]
 8000196:	6013      	str	r3, [r2, #0]
	// SET update generration
	*TIMER1_EGR |= (0b1);
 8000198:	69bb      	ldr	r3, [r7, #24]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	f043 0201 	orr.w	r2, r3, #1
 80001a0:	69bb      	ldr	r3, [r7, #24]
 80001a2:	601a      	str	r2, [r3, #0]

	// Set TIMx_CCRx

	// Set Output Compare mode
	*TIMER1_CCMR1 &= ~(0b111 << 4);
 80001a4:	693b      	ldr	r3, [r7, #16]
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80001ac:	693b      	ldr	r3, [r7, #16]
 80001ae:	601a      	str	r2, [r3, #0]
	*TIMER1_CCMR1 |= (0b110 << 4);
 80001b0:	693b      	ldr	r3, [r7, #16]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80001b8:	693b      	ldr	r3, [r7, #16]
 80001ba:	601a      	str	r2, [r3, #0]
	// Enable pre-load
	*TIMER1_CCMR1 |= (0b1 << 2);
 80001bc:	693b      	ldr	r3, [r7, #16]
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f043 0204 	orr.w	r2, r3, #4
 80001c4:	693b      	ldr	r3, [r7, #16]
 80001c6:	601a      	str	r2, [r3, #0]
	// Enable output fast mode
	*TIMER1_CCMR1 |= (0b1 << 3);
 80001c8:	693b      	ldr	r3, [r7, #16]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f043 0208 	orr.w	r2, r3, #8
 80001d0:	693b      	ldr	r3, [r7, #16]
 80001d2:	601a      	str	r2, [r3, #0]
	// Enable Capture/Compare output
	*TIMER1_CCER |= (0b1);
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f043 0201 	orr.w	r2, r3, #1
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	601a      	str	r2, [r3, #0]
	*TIMER1_BDTR |= (0b1 << 15)|(0b1<<13);
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	601a      	str	r2, [r3, #0]
	// the auto-reload preload register
	*TIMER1_CR1 |= (0b1 << 7);
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	601a      	str	r2, [r3, #0]
	// ENABLE TIMER1 BY SET CEN ON CR1
	*TIMER1_CR1 |= 0b1;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f043 0201 	orr.w	r2, r3, #1
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	601a      	str	r2, [r3, #0]
	*TIMER1_CCR = 10000;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <MY_TIMER1_INIT+0xf0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f242 7210 	movw	r2, #10000	; 0x2710
 800020c:	601a      	str	r2, [r3, #0]


}
 800020e:	bf00      	nop
 8000210:	372c      	adds	r7, #44	; 0x2c
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	40012c28 	.word	0x40012c28
 800021c:	40012c10 	.word	0x40012c10
 8000220:	40012c2c 	.word	0x40012c2c
 8000224:	40012c14 	.word	0x40012c14
 8000228:	40012c0c 	.word	0x40012c0c
 800022c:	40012c18 	.word	0x40012c18
 8000230:	40012c20 	.word	0x40012c20
 8000234:	40012c44 	.word	0x40012c44
 8000238:	40012c00 	.word	0x40012c00
 800023c:	20000004 	.word	0x20000004

08000240 <GPIO_PWM_OUTPUT>:
void GPIO_PWM_OUTPUT() {
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	// Alternate function push-pull
	// GPIO A8
	MY_GPIO_A->CRH &= ~(0b1111);
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <GPIO_PWM_OUTPUT+0x2c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <GPIO_PWM_OUTPUT+0x2c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f022 020f 	bic.w	r2, r2, #15
 8000252:	605a      	str	r2, [r3, #4]
	MY_GPIO_A->CRH |= (0b1010);
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <GPIO_PWM_OUTPUT+0x2c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	685a      	ldr	r2, [r3, #4]
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <GPIO_PWM_OUTPUT+0x2c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f042 020a 	orr.w	r2, r2, #10
 8000262:	605a      	str	r2, [r3, #4]


}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000000 	.word	0x20000000

08000270 <TIM1_UP_IRQHandler>:
		MY_GPIO_B->ODR |= (1 << var);
		//HAL_Delay(100);
		MY_DELAY(100);
	}
}
void TIM1_UP_IRQHandler() {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	uint32_t *TIMER1_SR = (uint32_t*) 0x40012C10;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <TIM1_UP_IRQHandler+0x2c>)
 8000278:	607b      	str	r3, [r7, #4]
	counter++;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <TIM1_UP_IRQHandler+0x30>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	3301      	adds	r3, #1
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <TIM1_UP_IRQHandler+0x30>)
 8000282:	6013      	str	r3, [r2, #0]
	*TIMER1_SR &= ~0b1;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f023 0201 	bic.w	r2, r3, #1
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	601a      	str	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40012c10 	.word	0x40012c10
 80002a0:	20000030 	.word	0x20000030

080002a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002aa:	f000 f8c9 	bl	8000440 <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002ae:	f000 f82b 	bl	8000308 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	//MY_RCC_INIT("HSI");
	// ENABLE CLOCK TIMER1
	//MY_RCC->APB2ENR |= (0b1 << 11);
	//MY_RCC->APB2ENR |= (0b1 << 3) | (0b1 << 2) | (0b1);
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <main+0x60>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <main+0x60>)
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <main+0x60>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0308 	and.w	r3, r3, #8
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <main+0x60>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <main+0x60>)
 80002d0:	f043 0304 	orr.w	r3, r3, #4
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <main+0x60>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0304 	and.w	r3, r3, #4
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM1_CLK_ENABLE();
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <main+0x60>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <main+0x60>)
 80002e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <main+0x60>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
	GPIO_PWM_OUTPUT();
 80002fa:	f7ff ffa1 	bl	8000240 <GPIO_PWM_OUTPUT>
	MY_TIMER1_INIT();
 80002fe:	f7ff ff25 	bl	800014c <MY_TIMER1_INIT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000302:	e7fe      	b.n	8000302 <main+0x5e>
 8000304:	40021000 	.word	0x40021000

08000308 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_GPIO_Init+0x28>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <MX_GPIO_Init+0x28>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <MX_GPIO_Init+0x28>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

	}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40021000 	.word	0x40021000

08000334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <HAL_MspInit+0x5c>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a14      	ldr	r2, [pc, #80]	; (8000390 <HAL_MspInit+0x5c>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <HAL_MspInit+0x5c>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <HAL_MspInit+0x5c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <HAL_MspInit+0x5c>)
 8000358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <HAL_MspInit+0x5c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_MspInit+0x60>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <HAL_MspInit+0x60>)
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000
 8000394:	40010000 	.word	0x40010000

08000398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800039c:	e7fe      	b.n	800039c <NMI_Handler+0x4>

0800039e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <HardFault_Handler+0x4>

080003a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <MemManage_Handler+0x4>

080003aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <BusFault_Handler+0x4>

080003b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <UsageFault_Handler+0x4>

080003b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr

080003c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr

080003da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003de:	f000 f875 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003f6:	e003      	b.n	8000400 <LoopCopyDataInit>

080003f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003fe:	3104      	adds	r1, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000400:	480a      	ldr	r0, [pc, #40]	; (800042c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000404:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000406:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000408:	d3f6      	bcc.n	80003f8 <CopyDataInit>
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800040c:	e002      	b.n	8000414 <LoopFillZerobss>

0800040e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000410:	f842 3b04 	str.w	r3, [r2], #4

08000414 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000416:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000418:	d3f9      	bcc.n	800040e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800041a:	f7ff ffe4 	bl	80003e6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800041e:	f000 f94b 	bl	80006b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f7ff ff3f 	bl	80002a4 <main>
  bx lr
 8000426:	4770      	bx	lr
  ldr r3, =_sidata
 8000428:	08000720 	.word	0x08000720
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000430:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000434:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000438:	20000038 	.word	0x20000038

0800043c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC1_2_IRQHandler>
	...

08000440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_Init+0x28>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <HAL_Init+0x28>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000450:	2003      	movs	r0, #3
 8000452:	f000 f8fd 	bl	8000650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000456:	2000      	movs	r0, #0
 8000458:	f000 f808 	bl	800046c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800045c:	f7ff ff6a 	bl	8000334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40022000 	.word	0x40022000

0800046c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_InitTick+0x54>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_InitTick+0x58>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000482:	fbb3 f3f1 	udiv	r3, r3, r1
 8000486:	fbb2 f3f3 	udiv	r3, r2, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f907 	bl	800069e <HAL_SYSTICK_Config>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	e00e      	b.n	80004b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b0f      	cmp	r3, #15
 800049e:	d80a      	bhi.n	80004b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a0:	2200      	movs	r2, #0
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	f04f 30ff 	mov.w	r0, #4294967295
 80004a8:	f000 f8dd 	bl	8000666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <HAL_InitTick+0x5c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e000      	b.n	80004b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000008 	.word	0x20000008
 80004c4:	20000010 	.word	0x20000010
 80004c8:	2000000c 	.word	0x2000000c

080004cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_IncTick+0x1c>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_IncTick+0x20>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	4a03      	ldr	r2, [pc, #12]	; (80004ec <HAL_IncTick+0x20>)
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	20000010 	.word	0x20000010
 80004ec:	20000034 	.word	0x20000034

080004f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f003 0307 	and.w	r3, r3, #7
 80004fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <__NVIC_SetPriorityGrouping+0x44>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800050c:	4013      	ands	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800051c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000522:	4a04      	ldr	r2, [pc, #16]	; (8000534 <__NVIC_SetPriorityGrouping+0x44>)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	60d3      	str	r3, [r2, #12]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <__NVIC_GetPriorityGrouping+0x18>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	f003 0307 	and.w	r3, r3, #7
}
 8000546:	4618      	mov	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	; 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800061c:	d301      	bcc.n	8000622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061e:	2301      	movs	r3, #1
 8000620:	e00f      	b.n	8000642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <SysTick_Config+0x40>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3b01      	subs	r3, #1
 8000628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800062a:	210f      	movs	r1, #15
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f7ff ff90 	bl	8000554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <SysTick_Config+0x40>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <SysTick_Config+0x40>)
 800063c:	2207      	movs	r2, #7
 800063e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	e000e010 	.word	0xe000e010

08000650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff49 	bl	80004f0 <__NVIC_SetPriorityGrouping>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	4603      	mov	r3, r0
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000678:	f7ff ff5e 	bl	8000538 <__NVIC_GetPriorityGrouping>
 800067c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	68b9      	ldr	r1, [r7, #8]
 8000682:	6978      	ldr	r0, [r7, #20]
 8000684:	f7ff ff90 	bl	80005a8 <NVIC_EncodePriority>
 8000688:	4602      	mov	r2, r0
 800068a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff5f 	bl	8000554 <__NVIC_SetPriority>
}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ffb0 	bl	800060c <SysTick_Config>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <__libc_init_array>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	2500      	movs	r5, #0
 80006bc:	4e0c      	ldr	r6, [pc, #48]	; (80006f0 <__libc_init_array+0x38>)
 80006be:	4c0d      	ldr	r4, [pc, #52]	; (80006f4 <__libc_init_array+0x3c>)
 80006c0:	1ba4      	subs	r4, r4, r6
 80006c2:	10a4      	asrs	r4, r4, #2
 80006c4:	42a5      	cmp	r5, r4
 80006c6:	d109      	bne.n	80006dc <__libc_init_array+0x24>
 80006c8:	f000 f81a 	bl	8000700 <_init>
 80006cc:	2500      	movs	r5, #0
 80006ce:	4e0a      	ldr	r6, [pc, #40]	; (80006f8 <__libc_init_array+0x40>)
 80006d0:	4c0a      	ldr	r4, [pc, #40]	; (80006fc <__libc_init_array+0x44>)
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	10a4      	asrs	r4, r4, #2
 80006d6:	42a5      	cmp	r5, r4
 80006d8:	d105      	bne.n	80006e6 <__libc_init_array+0x2e>
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e0:	4798      	blx	r3
 80006e2:	3501      	adds	r5, #1
 80006e4:	e7ee      	b.n	80006c4 <__libc_init_array+0xc>
 80006e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ea:	4798      	blx	r3
 80006ec:	3501      	adds	r5, #1
 80006ee:	e7f2      	b.n	80006d6 <__libc_init_array+0x1e>
 80006f0:	08000718 	.word	0x08000718
 80006f4:	08000718 	.word	0x08000718
 80006f8:	08000718 	.word	0x08000718
 80006fc:	0800071c 	.word	0x0800071c

08000700 <_init>:
 8000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000702:	bf00      	nop
 8000704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000706:	bc08      	pop	{r3}
 8000708:	469e      	mov	lr, r3
 800070a:	4770      	bx	lr

0800070c <_fini>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	bf00      	nop
 8000710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000712:	bc08      	pop	{r3}
 8000714:	469e      	mov	lr, r3
 8000716:	4770      	bx	lr
